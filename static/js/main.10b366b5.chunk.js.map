{"version":3,"sources":["components/AuthorData.js","components/Header.js","components/Button.js","components/Chunk.js","Q.js","App.js","reportWebVitals.js","index.js"],"names":["Author","Header","title","className","defaultProps","Button","text","onClick","Chunk","content","Question","questionData","this","undefined","t","a","forEach","push","p","c","length","answerIndex","console","log","Questionnaire","props","question","pts4correct","next","bind","state","stage","_contentSummary","_contentQ","ptsTotal","userPoints","id","map","correct","userAnswer","questionIndex","answers","_answerAndProceed","setState","prevState","React","Component","App","Q","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10b366b5.chunk.js","sourcesContent":["export const Author = {\r\n    \"name\": \"Markku Sukanen\",\r\n    \"email\": \"markku.sukanen@gmail.com\",\r\n    \"github\": \"http://github.com/msukanen/\"\r\n}","import PropTypes from 'prop-types'\nimport { Author } from './AuthorData'\n\nconst Header = ({title}) => {\n    return(\n        <header className=\"App-header\">\n            <h1>{title}</h1>\n            <p>2021 by <em>{Author.name}</em></p>\n        </header>\n    )\n}\n\nHeader.defaultProps = {\n    title: 'JSQuestionnaire w/React',\n}\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n}\n\nexport default Header\n","import PropTypes from 'prop-types'\r\n\r\nconst Button = ({text, onClick}) => {\r\n    return <button className='btn' onClick={onClick}>{text}</button>\r\n}\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport default Button\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Chunk = ({ title, content }) => {\r\n    return(\r\n        <div className=\"container\">\r\n            <h1>{title}</h1>\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nChunk.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    content: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Chunk\r\n","import React from 'react'\r\nimport Button from './components/Button'\r\nimport Chunk from './components/Chunk'\r\n\r\n/**\r\n * A question with answer(s), points, etc.\r\n */\r\nclass Question {\r\n    #text           // question text\r\n    #answers        // answer(s) to the question\r\n    #pts4correct    // points for correct answer\r\n    #correctIdx     // index of correct answer in {#answers}\r\n    #userAnsIdx     // user's answer's index\r\n\r\n    constructor(questionData) {\r\n        this.#userAnsIdx = undefined\r\n        this.#text = questionData.t\r\n        this.#answers = []\r\n        questionData.a.forEach( a => { this.#answers.push(a) })\r\n        this.#pts4correct = questionData.p === undefined ? 0 : questionData.p\r\n        this.#correctIdx = questionData.c\r\n    }\r\n\r\n    get text(){ return this.#text }\r\n    get answers(){ return this.#answers }\r\n    get pts4correct(){ return this.#pts4correct }\r\n    /**\r\n     * Stuff to display based on answer's (in)correctness or lack of correct answer.\r\n     */\r\n    get correct(){ return(\r\n        this.#correctIdx === undefined\r\n            ? <i>&mdash; ei oikeaa tai v&auml;&auml;r&auml;&auml; vastausta</i> // ...no correct answer at all...\r\n        : this.#text[this.#text.length-1]==='=' // question ends with '='?\r\n            ? this.#answers[this.#correctIdx]   // ...if so, don't alter\r\n        : ': '+this.#answers[this.#correctIdx]  // ...but if not, fiddle with it a bit.\r\n    )}\r\n    /**\r\n     * What to display if user answered (in)correctly...\r\n     */\r\n    get userAnswer(){\r\n        if (this.#correctIdx !== undefined && this.#userAnsIdx !== this.#correctIdx)\r\n            return `...mutta arvasit \"${this.#answers[this.#userAnsIdx]}\"`\r\n        return '' // nothing to add, nothing to comment...\r\n    }\r\n    set userAnswer(answerIndex){\r\n        if (answerIndex !== undefined && (answerIndex < 0 || answerIndex >= this.#answers.length)) {\r\n            console.log(`ERR: USER INP \"${answerIndex}\" out of bounds or completely invalid.`)\r\n            answerIndex = undefined\r\n        }\r\n        this.#userAnsIdx = answerIndex\r\n    }\r\n    /**\r\n     * Points scored, if any.\r\n     */\r\n    get userPoints(){\r\n        return this.#correctIdx === undefined || this.#correctIdx === this.#userAnsIdx\r\n            ?  this.#pts4correct\r\n            :  0\r\n    }\r\n}\r\n\r\n/**\r\n * Questions? Yes, a lot.\r\n */\r\nclass Questionnaire extends React.Component {\r\n    static #summaryID = -1  // used as non-question 'state' to indicate Summary\r\n    static #questionData = [\r\n        {t: 'Paljonko kello on', a:['Paljon', 'Aika v채h채n', 'Onhan se'] },\r\n        {t: '1+1 =', a:['Numero','Laskentoa',2], p:5, c:2},\r\n        {t: 'T채m채 on soitin', a:['Puhelin','Kitara','Kitaro'], p:2, c:1}\r\n    ]\r\n\r\n    #qs    = [] // will contain all Question objects constructor'ed....\r\n    #maxPts = 0 // max points from the whole questionnaire\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        Questionnaire.#questionData.forEach(questionData => {\r\n            let question = new Question(questionData)\r\n            this.#maxPts += question.pts4correct\r\n            this.#qs.push(question)\r\n        })\r\n        this.next = this.next.bind(this)\r\n        this.state = { stage: undefined }\r\n    }\r\n\r\n    /**\r\n     * Rendering state-machine.\r\n     * \r\n     * @returns stuff to render.\r\n     */\r\n    render() {\r\n        switch(this.state.stage) {\r\n            case undefined:\r\n                return <Chunk title='Questionnaire' content={<Button text='&hellip;start&hellip;' onClick={this.next}/>}/>\r\n            case Questionnaire.#summaryID:\r\n                return <Chunk title='Summary' content={this._contentSummary()}/>\r\n            default:\r\n                return <Chunk title={this.#qs[this.state.stage].text} content={this._contentQ(this.state.stage)}/>\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate accumulated points and form a summary chunk about all questions.\r\n     * \r\n     * @returns summary chunk\r\n     */\r\n    _contentSummary(){\r\n        let ptsTotal = 0\r\n        this.#qs.forEach( question => {\r\n            ptsTotal += question.userPoints\r\n        })\r\n        return<div id=\"summary-text\"><div>\r\n            {this.#qs.map( question => {\r\n                return <p>{question.text} {question.correct}<br />{question.userAnswer}</p>\r\n            })}</div>\r\n            <p>Pisteet: {ptsTotal} / {this.#maxPts}</p>\r\n            <Button text='uudestaan?!' onClick={this.next}/>\r\n        </div>\r\n    }\r\n\r\n    /**\r\n     * Access the desired question and form a display chunk about it.\r\n     * \r\n     * @param {*} questionIndex Index of question to access.\r\n     * @returns \r\n     */\r\n    _contentQ(questionIndex) {\r\n        return<div className=\"table\">\r\n            {this.#qs[questionIndex].answers.map((text, answerIndex) => {\r\n                return <div className=\"row\">\r\n                    <div className=\"col\">{text}</div>\r\n                    <div className=\"col\"><Button text='valitse' onClick={() => this._answerAndProceed(questionIndex, answerIndex)}/></div>\r\n                </div>\r\n            })}\r\n        </div>\r\n    }\r\n\r\n    _answerAndProceed(questionIndex, answerIndex) {\r\n        this.#qs[this.state.stage].userAnswer = answerIndex\r\n        this.next()\r\n    }\r\n\r\n    /**\r\n     * Proceed to next \"stage\" in line of questions or to summary.\r\n     */\r\n    next() {\r\n        this.setState(prevState => {\r\n            let questionIndex = prevState.stage === undefined ? 0 : prevState.stage + 1\r\n            if (questionIndex >= Questionnaire.#questionData.length)\r\n                questionIndex = Questionnaire.#summaryID\r\n            return {stage: questionIndex}\r\n        })\r\n    }\r\n}\r\n\r\nexport default Questionnaire\r\n","import './App.css'\nimport Header from './components/Header'\nimport Questionnaire from \"./Q\"\n\nfunction App() {return (\n\t<div className=\"App\">\n\t\t<Header title=\"JSQuestionnaire w/React\"/>\n\t\t<Questionnaire />\n\t</div>\n)}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}